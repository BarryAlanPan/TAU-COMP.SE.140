worker_processes 1;

events {
    worker_connections 1024;
}

http {
    lua_shared_dict system_state 1m;
    lua_shared_dict state_log 1m;

    init_by_lua_block {
        ngx.shared.system_state:set("current_state", "INIT")
        ngx.shared.state_log:set("log", "")
    }


    upstream service1_backend {
        server service1-1:8199;
        server service1-2:8199;
        server service1-3:8199;
    }

    server {
        listen 80;
        server_name localhost;
        
        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location / {
            root /usr/share/nginx/html;
            index index.html;
        }

        location /data {
            proxy_pass http://service1_backend/;
        }

        location /stop {
            default_type text/plain;
            content_by_lua_block {
                local result = os.execute("/usr/local/openresty/scripts/stop.sh")
                if result then
                    ngx.say("Stopping services...")
                else
                    ngx.say("Failed to stop services")
                    ngx.log(ngx.ERR, "Failed to execute stop script")
                end
            }
        }
    }

    server {
        listen 8197;
        server_name localhost;

        auth_basic "Restricted Access";
        auth_basic_user_file /etc/nginx/.htpasswd;

        location /state {
            content_by_lua_block {
                if ngx.req.get_method() == "PUT" then
                    ngx.req.read_body()
                    local new_state = ngx.req.get_body_data()
                    local current_state = ngx.shared.system_state:get("current_state")
                    
                    if new_state ~= current_state then
                        local timestamp = ngx.localtime()
                        local adding_log = timestamp .. ": " .. current_state .. "->" .. new_state .. "\n"
                        local current_log = ngx.shared.state_log:get("log") or ""
                        ngx.shared.state_log:set("log", current_log .. adding_log)
                        ngx.shared.system_state:set("current_state", new_state)
                    end
                    
                    ngx.status = 200
                    ngx.header.content_type = "text/plain"
                    ngx.say("State updated to: " .. new_state)
                -- GET method
                else
                    ngx.header.content_type = "text/plain"
                    ngx.say(ngx.shared.system_state:get("current_state"))
                end
            }
        }

        location /run-log {
            content_by_lua_block {
                ngx.header.content_type = "text/plain"
                ngx.say(ngx.shared.state_log:get("log") or "")
            }
        }

        # Keep the original API for /request
        location / {
            proxy_pass http://service1_backend/;
        }

        location /request {
            content_by_lua_block {
                local current_state = ngx.shared.system_state:get("current_state")
                
                if current_state == "RUNNING" then
                    ngx.exec("/")
                else
                    ngx.status = 503
                    ngx.header.content_type = "text/plain"
                    ngx.say("Service Unavailable")
                end
            }
        }
    }
}